<script webc:setup>
  const knownSlides = $data.knownSlides;

  const getKnown = (slides) => {
    if (!knownSlides) return slides;

    return slides.map((slide) => {
      if (knownSlides && slide.known) {
        const isKnown = knownSlides[slide.known];
        return {...isKnown, ...slide};
      }
      return slide;
    });
  }
</script>

<slide-deck
  webc:import="npm:@oddbird/slide-deck"
  :id="this.id || 'slides'"
  :@slides="getKnown(this.slides)"
  slide-view="slideshow"
  key-control
  follow-active
>
  <template
    webc:nokeep
    webc:for="slide of this.slides"
  >
    <todo-slide
      webc:nokeep
      webc:if="slide.todo"
      :@slide="slide"
    ></todo-slide>

    <split-slide
      webc:nokeep
      webc:elseif="slide.img && (slide.md || slide.webc || slide.title)"
      :@slide="slide"
    ></split-slide>

    <event-slide
      webc:nokeep
      webc:elseif="slide.venue"
      :@slide="this.slide"
      :@url="this.page.url"
    ></event-slide>

    <demo-slide
      webc:nokeep
      webc:elseif="slide.demo"
      :@slide="slide"
    ></demo-slide>

    <support-slide
      webc:nokeep
      webc:elseif="slide.caniuse || slide.support"
      :@slide="slide"
    ></support-slide>

    <embed-slide
      webc:nokeep
      webc:elseif="slide.video || slide.embed"
      :@slide="slide"
    ></embed-slide>

    <img-slide
      webc:nokeep
      webc:elseif="slide.img"
      :@slide="slide"
    ></img-slide>

    <url-slide
      webc:nokeep
      webc:elseif="slide.url"
      :@slide="slide"
    ></url-slide>

    <pen-slide
      webc:nokeep
      webc:elseif="slide.pen"
      :@slide="slide"
    ></pen-slide>

    <code-slide
      webc:nokeep
      webc:elseif="slide.html || slide.css || slide.scss || slide.js || slide.code"
      :@slide="slide"
    ></code-slide>

    <quote-slide
      webc:nokeep
      webc:elseif="slide.quote"
      :@slide="slide"
    ></quote-slide>

    <default-slide
      webc:nokeep
      webc:else
      :@slide="slide"
    ></default-slide>
  </template>

  <slide-controls webc:nokeep></slide-controls>
</slide-deck>

<style webc:bucket="slides-layer-order">
  @layer slide.base, slide.content, slide.views, slide.type;
</style>

<style webc:bucket="slides-core">
@layer slide.base {
  slide-deck,
  slide-deck *,
  slide-deck *::before,
  slide-deck *::after {
    box-sizing: border-box;
  }

  slide-deck {
    --slide-gap: clamp(12px, 2cqmin, 24px);
    --slide-half-gap: calc(var(--slide-gap) / 2);
    --slide-spacer: clamp(1.5rlh, 10vw, 5rlh);

    --slide-accent-color: AccentColor;
    --slide-border-color: gray;

    counter-reset: slide;
    container: slide slide-deck / inline-size;
    display: grid;
    overflow-x: clip;
  }
}

@layer slide.views {
  [slide-view=grid],
  [slide-view=speaker] {
    --slide-ratio: 16/9;
    --target-margin: var(--slide-gap);
    --slide-target-outline: medium dotted;
    --slide-target-outline-offset: calc(var(--slide-gap) * 0.5);
    gap: var(--slide-gap);
    padding: var(--slide-gap);
  }

  [slide-view=grid] {
    --slide-border: thin solid gray;
    --slide-note-margin-block: var(--slide-gap);
    --slide-normal-text: smaller;
    grid-template-columns: repeat(auto-fill, minmax(min(35ch, 100%), 1fr));
    font-size: var(--slide-small-text);

    [slide-item='container'] {
      align-items: start;
      grid-template-rows: auto 1fr;
    }
  }

  [slide-view=slideshow] {
    --to-slide-inset: auto calc(var(--slide-half-gap) / 2) calc(var(--slide-half-gap) / 2) auto;
    --to-slide-opacity: 0.05;
    --to-slide-translate: 0 0;
    grid-auto-rows: 100svh;

    [slide-canvas] {
      border: 0;
      border-block-end: thin solid var(--slide-border-color);
      scroll-snap-align: start;
    }

    [slide-note] {
      display: none;
    }
  }

  [slide-view=speaker] {
    --slide-border: thin solid gray;
    --slide-normal-text: var(--slide-small-text);
    display: grid;
    grid-template-columns: minmax(30vw, auto) minmax(65vw, 1fr);

    [slide-item='container'] {
      align-items: center;
      grid-column: 1 / -1;
      grid-template-columns: subgrid;
      position: relative;
      z-index: var(--slide-z, initial);

      &:last-of-type {
        margin-block-end: 75vh;
      }
    }

    [slide-canvas] {
      filter: grayscale(var(--canvas-grayscale, 0.7));
      grid-column: 1;
      opacity: var(--canvas-opacity, 0.6);

      @media (width < 75em) {
        zoom: 0.75;
      }

      @media (width < 50em) {
        zoom: 0.5;
      }
    }

    [slide-note] {
      background-color: Canvas;
      color: CanvasText;
      grid-column: 2;
      min-height: calc(100vh - calc(var(--slide-gap) * 2));
      padding-inline: var(--slide-gap);
      position: absolute;
      right: 0;
      top: 0;
      visibility: var(--note-visibility, hidden);
      width: 100%;
    }

    [aria-current='true'] {
      --note-visibility: visible;
      --canvas-opacity: 1;
      --canvas-grayscale: 0;
      --slide-z: 10;
    }
  }
}
</style>
